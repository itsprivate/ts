{
  "author": "SyefufS",
  "original_created_utc": 1626255651,
  "title": "Relevant philosophy books for software engineering",
  "created_utc": 1626306576,
  "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hey, I’ve been listening to the Philosophize This podcast and I got very interested in Philosophy, I just finished the Kant episodes. </p>\n\n<p>I want to start applying philosophy to my current profession: Software engineering. Questions like: “what is data?”, “how can I categorize different kinds of prodedures?” Are questions I can think about already. When I started thinking about questions like: “Why should I go out of my way to do X”, or “X or Y”, I notice that I am not working from strong fundaments. For instance, sometimes an answer might look like: “We do X because doing so increases maintainability of the software.”, but then I run into the question, “What exactly is maintainability?”, “Why is it desireable over getting the software out of the door more quickly?”, “Are there cases in which getting software out of the door more quickly is actually more desireable?”. </p>\n\n<p>My point is not that I cannot to answer these questions, but I thought, perhaps there is some work done that might be helpful in addressing these kinds of questions. One uneducated guess for instance is utilitarianism.</p>\n\n<p>Do you know of any philosophers or works that can help me think about justifications and tradeoffs of software development?</p>\n</div><!-- SC_ON -->",
  "score": 101,
  "permalink": "/r/askphilosophy/comments/ok0x5x/relevant_philosophy_books_for_software_engineering/",
  "subreddit": "askphilosophy",
  "id": "ok0x5x",
  "is_self": true,
  "media": null,
  "is_video": false,
  "the_new_excerpt": "Hey, I’ve been listening to the Philosophize This podcast and I got very\ninterested in Philosophy, I just finished the Kant episodes.\n\nI want to start applying philosophy to my current profession: Software\nengineering. Questions like: “what is data?”, “how can I categorize different\nkinds of…"
}