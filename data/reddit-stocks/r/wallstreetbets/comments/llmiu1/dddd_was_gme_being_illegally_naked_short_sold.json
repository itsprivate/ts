{
  "approved_at_utc": null,
  "subreddit": "wallstreetbets",
  "selftext": "In this DDDD (Data-Driven DD), we'll be analyzing some Failure to Deliver (FTD) data released by the SEC for Jan 15 - 29 to definitively see if there's been any shady shit going on with GME; namely, illegal (or legal by MMs?) naked short selling. This is a continuation of a similar analysis I did [last time](https://www.reddit.com/r/wallstreetbets/comments/larhlw/dddd_is_gme_being_illegally_naked_short_sold/) when the last data set was released, with a few modifications. Since I'm sure 99% of y'all are barely going to read this entire thing, let alone read a second wall of text, I'll just re-use some of the content and explanations in this post.\n\n*Disclaimer - This is not financial advice, and a lot of the content below is my personal opinion and for ENTERTAINMENT PURPOSES ONLY. In fact, the numbers, facts, or explanations presented below could be wrong and be made up and with some satire thrown in. Don't buy random options because some person on the internet says so. Do your own research and come to your own conclusions on what you should do with your own money, and how levered you want to be based on your personal risk tolerance.*\n\n**What is a Failure to Deliver?**\n\nA Failure to Deliver is reported when a broker is unable to deliver a share that they have sold to the clearing house by the settlement date (2 days after the transaction); [see my DDDD discussing what how this all works if you're curious](https://www.reddit.com/r/wallstreetbets/comments/l9sh9e/dddd_why_gme_might_next_week_and_how_it_could/). This can happen for many reason, and in the [examples given by the SEC](https://www.sec.gov/investor/pubs/regsho.htm) includes delays if people are physically delivering share certificates for some reason, and market makers (eg. Citadel) legally selling shares to a buyer without an actual seller (i.e. naked short sale) to provide liquidity; they just need to make sure they're able to later source that share quickly after it.\n\n**Methodology & Caveats**\n\nI'm going to process the raw SEC data and join it with some market data from an API, which I'll paste below. This processed, enriched data, which I have uploaded [here](https://www.file.io/download/SbQSw9PUtZfS) for anyone wrinkle-brained enough to dig through the data themselves, is then analyzed by another script to answer several questions to help definitively show what sort of involvement of naked short selling in GME during Jan 15 - 29. The answers we're going to specifically answer is\n\n1. How many days saw a significant amount of FTDs for GME, and how does that compare to other stocks?\n2. What was the total value of FTDs of GME during this period, and how does it compare to other stocks?\n3. **What % of the volume for GME couldn't be delivered during this time?**\n\nThe last part is the most important imo, since GME accounted for an absurdly large portion of the market's volume for multiple days in January, so if you don't normalize for volume you'll obviously have GME top every analysis in absolute terms.\n\nNow, **these are all rough and kind of inaccurate especially for low-volume tickers** because the SEC data is based on the total number of outstanding failure-to-deliver shares for a particular settlement date. This means that\n\n1. Since you can have the same share being failed to deliver multiple days in a row, shares in these situations will be counted multiple times in all the data shown below.\n2. The earliest possible date shares in a trade can be counted as failed to be delivered is 3 trading days after the transaction occurred (i.e. T+2 settlement), so **literally none of the failure-to-deliver shares represents that day's volume**. However, I'm going to make an assumption that a day's volume will be in the same ball park as the volume from 3 days ago, so it should give a rough estimate. There are quite a few cases, especially with small-caps, where this is clearly not the case, and you will see many cases with a 100+% failure to deliver / volume results if anyone goes through the raw data.\n3. The dollar value itself is wrong because it's using the price at settlement date, not the transaction date.\n\nHowever, with these caveats, the purpose is to compare GME with other stocks to see if anything stands out while answering those questions, so it should give a fairly accurate, albeit imperfect, representation of this.\n\n**The Code**\n\nFeel free to skip this section if y'all are code illiterate, but putting this here for transparency and so that someone can call me out if I'm making any of the results up or if I have a bug somewhere, which considering I threw this together in less than an hour, probably is the case. If you do see something wrong pls comment and I'll fix it if it's legitimate.\n\n*Processing Code*\n\n    import json\n    from collections import defaultdict\n    import time\n    import requests\n    \n    POLYGON_API_KEY = '<POLYGON API KEY HERE>'\n    VOLUME_DATA_API_URL = 'https://api.polygon.io/v1/open-close/{}/2021-01-{}?unadjusted=true&apiKey=' + POLYGON_API_KEY\n    \n    # Reads data\n    dates_to_stocks = defaultdict(lambda: defaultdict(float))\n    f = open('fail_to_delivers.txt', 'r') # https://www.sec.gov/data/foiadocsfailsdatahtm\n    all_tickers_set = set()\n    for line in f:\n        parts = line.split('|');\n        date = parts[0]\n        ticker = parts[2]\n        try:\n            fails = int(parts[3])\n            price = float(parts[5])\n            # Ignore anything < 25M\n            if price * fails < 25000000:\n                continue\n            all_tickers_set.add(ticker)\n            value_of_fails = price * fails\n            dates_to_stocks[date][ticker] = (value_of_fails, fails)\n        except ValueError:\n            # fails or price was not a number; probably not traded (eg.'.')\n            pass\n    \n    data_by_date = defaultdict(lambda: {})\n    for date, stocks in dates_to_stocks.items():\n        day = int(date[-2:])\n        for ticker in all_tickers_set:\n            if ticker in stocks:\n                val_of_fails = stocks[ticker][0]\n                num_fails = stocks[ticker][1]\n            else:\n                val_of_fails = 0\n                num_fails = 0\n            req = requests.get(url=VOLUME_DATA_API_URL.format(ticker, str(day).zfill(2)))\n            res = req.json()\n            if res['status'] == 'NOT_FOUND':\n                # Skip this day of data if no vol\n                data_by_date[date][ticker] = {\n                    'num_fails': 0,\n                    'val_of_fails': 0,\n                    'volume': 0,\n                    'num_fails_pct_vol': 0,\n                }\n                continue\n            else:\n                try:\n                    volume = res['volume']\n                except KeyError:\n                    print(res)\n            val_of_fails_in_mill = int(val_of_fails / 1000000)\n            pct_vol = num_fails / volume * 100\n            data_by_date[date][ticker] = {\n                'num_fails': num_fails,\n                'val_of_fails': val_of_fails,\n                'volume': volume,\n                'num_fails_pct_vol': pct_vol,\n            }\n            print(data_by_date[date][ticker])\n    \n    with open('data.json', 'w', encoding='utf-8') as f:\n        json.dump(data_by_date, f, ensure_ascii=False, indent=2)\n\nHere's my output [data.json](https://www.file.io/download/SbQSw9PUtZfS).\n\n*Analysis Code*\n\n    import json\n    from collections import defaultdict\n    import matplotlib.pyplot as plt\n    \n    with open('./data.json') as f:\n        data = json.load(f)\n    x_axis = data.keys() # Dates = X axis\n    \n    # List of all tickers in the FTD list\n    all_tickers_set = set()\n    for date, date_data_by_ticker in data.items():\n        all_tickers_set.update(date_data_by_ticker.keys())\n    \n    # Pre-processing + stats collecting\n    data_by_ticker = [] # Ticker data = Y values\n    days_more_25m_fails_freq_map = defaultdict(lambda: 0) # Counts tickers by # days > 10M FTDs\n    total_val_of_fails_counter = defaultdict(lambda: 0)\n    total_val_of_fails_vs_vol_counter = defaultdict(lambda: { 'total_fails': 0, 'total_vol': 0 })\n    for ticker in all_tickers_set:\n        ticker_data = []\n        for date in x_axis:\n            ticker_data.append(data[date][ticker])\n            if data[date][ticker]['val_of_fails'] > 25000000:\n                days_more_25m_fails_freq_map[ticker] += 1\n            total_val_of_fails_counter[ticker] += data[date][ticker]['val_of_fails']\n            total_val_of_fails_vs_vol_counter[ticker]['total_fails'] += data[date][ticker]['num_fails']\n            total_val_of_fails_vs_vol_counter[ticker]['total_vol'] += data[date][ticker]['volume']\n    \n    days_more_25m_fails_freq_map_sorted = dict(sorted(days_more_25m_fails_freq_map.items(), key=lambda item: item[1], reverse=True))\n    place = 1\n    print('TOP 20 TICKERS BY DAYS > $25M FTD')\n    top_tickers_days_fail = list(days_more_25m_fails_freq_map_sorted.keys())[:20]\n    for ticker in top_tickers_days_fail:\n        days = days_more_25m_fails_freq_map[ticker]\n        print('{: <2} ${: <5} {: <2} Days'.format(place, ticker, days))\n        place += 1\n    \n    total_val_of_fails_counter_sorted = dict(sorted(total_val_of_fails_counter.items(), key=lambda item: item[1], reverse=True))\n    place = 1\n    top_tickers_val_ftd = list(total_val_of_fails_counter_sorted.keys())[:20]\n    print('TICKERS BY TOTAL VAL OF FTDs')\n    for ticker in top_tickers_val_ftd:\n        ftd_val = total_val_of_fails_counter[ticker]\n        ftd_val_mills = int(ftd_val / 1000000)\n        print('{: <2} ${: <5} ${: <9}M'.format(place, ticker, ftd_val_mills))\n        place += 1\n    \n    total_fails_div_vol = {}\n    for ticker, val in total_val_of_fails_vs_vol_counter.items():\n        if val['total_fails'] == 0 or val['total_vol'] == 0:\n            continue\n        total_fails_div_vol[ticker] = 1.0 * val['total_fails'] / val['total_vol']\n    total_fails_div_vol_keys_sorted = sorted(total_fails_div_vol.keys(), key=lambda ticker: total_fails_div_vol[ticker], reverse=True)\n    place = 1\n    total_fails_div_vol_keys_sorted = total_fails_div_vol_keys_sorted[:70]\n    print('TOP TICKERS BY FTDS / VOL')\n    for ticker in total_fails_div_vol_keys_sorted:\n        mill_ftds = int(total_val_of_fails_vs_vol_counter[ticker]['total_fails'] / 1000000)\n        mill_vol = int(total_val_of_fails_vs_vol_counter[ticker]['total_vol'] / 1000000)\n        print('{: <2} {: <5} {: <2}M FTDs {: <4}M VOL {:.2f}% of total volume'.format(place, ticker, mill_ftds, mill_vol, total_fails_div_vol[ticker] * 100))\n        place += 1\n\n**Results**\n\n    TOP 20 TICKERS BY DAYS > $25M FTD\n    1  $GME   8  Days\n    2  $OPEN  6  Days\n    3  $IUSB  5  Days\n    4  $TAL   5  Days\n    5  $TQQQ  5  Days\n    6  $EEM   5  Days\n    7  $SPY   4  Days\n    8  $IFF   4  Days\n    9  $HYG   4  Days\n    10 $QQQ   3  Days\n    11 $FXI   3  Days\n    12 $QS    3  Days\n    13 $DD    3  Days\n    14 $AKAM  3  Days\n    15 $SLB   3  Days\n    16 $LQD   2  Days\n    17 $IYR   2  Days\n    18 $XLU   2  Days\n    19 $TIP   2  Days\n    20 $IBB   2  Days\n    TICKERS BY TOTAL VAL OF FTDs\n    1  $GME   $1023     M\n    2  $IUSB  $606      M\n    3  $FALN  $431      M\n    4  $PDO   $422      M\n    5  $HYG   $389      M\n    6  $TAL   $314      M\n    7  $CRM   $303      M\n    8  $TQQQ  $298      M\n    9  $XOP   $292      M\n    10 $IFF   $292      M\n    11 $SPY   $282      M\n    12 $RLAY  $251      M\n    13 $QQQ   $239      M\n    14 $BAC   $224      M\n    15 $LI    $223      M\n    16 $EFV   $221      M\n    17 $XRT   $219      M\n    18 $EEM   $218      M\n    19 $SLB   $203      M\n    20 $OPEN  $190      M\n    TOP TICKERS BY FTDS / VOL\n    1  PDO   20M FTDs 8   M VOL 246.95% of total volume\n    2  TMKRU 2 M FTDs 1   M VOL 154.21% of total volume\n    3  RLAY  5 M FTDs 6   M VOL 92.82% of total volume\n    4  FALN  14M FTDs 19  M VOL 76.67% of total volume\n    5  GINN  0 M FTDs 0   M VOL 66.71% of total volume\n    6  IUSB  11M FTDs 33  M VOL 32.95% of total volume\n    7  SPRQ  4 M FTDs 31  M VOL 15.42% of total volume\n    8  ESGU  1 M FTDs 12  M VOL 15.09% of total volume\n    9  BBEU  5 M FTDs 35  M VOL 14.27% of total volume\n    10 ILF   3 M FTDs 34  M VOL 10.86% of total volume\n    11 EFV   4 M FTDs 42  M VOL 10.61% of total volume\n    12 OPEN  6 M FTDs 70  M VOL 9.78% of total volume\n    13 BBAX  5 M FTDs 56  M VOL 9.75% of total volume\n    14 SCHF  2 M FTDs 30  M VOL 9.41% of total volume\n    15 ITA   0 M FTDs 3   M VOL 8.92% of total volume\n    16 ESGD  0 M FTDs 5   M VOL 8.37% of total volume\n    17 HYEM  1 M FTDs 17  M VOL 8.09% of total volume\n    18 FLOT  0 M FTDs 11  M VOL 7.41% of total volume\n    19 TAL   4 M FTDs 57  M VOL 7.20% of total volume\n    20 IYW   0 M FTDs 7   M VOL 6.93% of total volume\n    21 HYLB  1 M FTDs 24  M VOL 6.79% of total volume\n    22 LSI   0 M FTDs 3   M VOL 6.28% of total volume\n    23 YUM   0 M FTDs 15  M VOL 6.25% of total volume\n    24 XOP   4 M FTDs 74  M VOL 5.61% of total volume\n    25 SLB   8 M FTDs 163 M VOL 5.04% of total volume\n    26 AKAM  1 M FTDs 25  M VOL 5.01% of total volume\n    27 BLI   0 M FTDs 12  M VOL 4.45% of total volume\n    28 VXF   0 M FTDs 5   M VOL 4.13% of total volume\n    29 ASHR  0 M FTDs 27  M VOL 3.25% of total volume\n    30 FXR   0 M FTDs 22  M VOL 3.12% of total volume\n    31 NKLA  6 M FTDs 215 M VOL 3.08% of total volume\n    32 LI    7 M FTDs 230 M VOL 3.06% of total volume\n    33 SJNK  1 M FTDs 47  M VOL 2.96% of total volume\n    34 IFF   2 M FTDs 90  M VOL 2.82% of total volume\n    35 VEU   0 M FTDs 32  M VOL 2.75% of total volume\n    36 TIP   0 M FTDs 24  M VOL 2.68% of total volume\n    37 SHLS  1 M FTDs 47  M VOL 2.67% of total volume\n    38 AMCX  0 M FTDs 31  M VOL 2.55% of total volume\n    39 XRT   2 M FTDs 111 M VOL 2.34% of total volume\n    40 IBB   0 M FTDs 28  M VOL 2.17% of total volume\n    41 BHP   0 M FTDs 31  M VOL 2.07% of total volume\n    42 IYR   1 M FTDs 53  M VOL 2.05% of total volume\n    43 TAK   1 M FTDs 75  M VOL 1.94% of total volume\n    44 BNDX  0 M FTDs 37  M VOL 1.91% of total volume\n    45 COP   2 M FTDs 143 M VOL 1.85% of total volume\n    46 AEE   0 M FTDs 19  M VOL 1.84% of total volume\n    47 GH    0 M FTDs 10  M VOL 1.83% of total volume\n    48 TEAM  0 M FTDs 17  M VOL 1.78% of total volume\n    49 CRM   1 M FTDs 79  M VOL 1.74% of total volume\n    50 VEA   1 M FTDs 108 M VOL 1.74% of total volume\n    51 BBJP  0 M FTDs 53  M VOL 1.66% of total volume\n    52 SFIX  0 M FTDs 49  M VOL 1.62% of total volume\n    53 RLX   3 M FTDs 235 M VOL 1.49% of total volume\n    54 QS    1 M FTDs 131 M VOL 1.43% of total volume\n    55 IEMG  1 M FTDs 136 M VOL 1.39% of total volume\n    56 PEN   0 M FTDs 9   M VOL 1.33% of total volume\n    57 HYG   4 M FTDs 342 M VOL 1.30% of total volume\n    58 FXI   2 M FTDs 172 M VOL 1.24% of total volume\n    59 BAC   6 M FTDs 557 M VOL 1.23% of total volume\n    60 CMG   0 M FTDs 2   M VOL 1.21% of total volume\n    61 NOK   36M FTDs 3074M VOL 1.20% of total volume\n    62 XLU   1 M FTDs 137 M VOL 1.16% of total volume\n    63 TQQQ  3 M FTDs 268 M VOL 1.12% of total volume\n    64 XBI   0 M FTDs 55  M VOL 1.12% of total volume\n    65 IWF   0 M FTDs 16  M VOL 1.07% of total volume\n    66 GME   10M FTDs 974 M VOL 1.03% of total volume\n    67 ACWI  0 M FTDs 44  M VOL 1.01% of total volume\n    68 APHA  2 M FTDs 212 M VOL 1.01% of total volume\n    69 IJR   0 M FTDs 63  M VOL 0.99% of total volume\n    70 APPN  0 M FTDs 18  M VOL 0.98% of total volume\n\nHopefully, this data speaks for itself, but as a TLDR\n\nWhat does stand out is that GME has the most days with FTD > $25M (8 days) and cumulative value of FTDs (> $1B) in the SEC list\n\nbut\n\nBoth can be explained by the fact that GME accounted for a disproportionately large amount of the total volume during the period. If you **normalize by volume, GME becomes the 66th stock with the most Failure to Delivers**. While this may show that a few players have been doing something sketchy, it doesn't look like there's any systematic fraud going on.\n\n&#x200B;\n\nEDIT - I'm an idiot and forgot to \\* 100 for percentage. Fixed.",
  "author_fullname": "t2_t96r7",
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "DDDD - Was GME being Illegally Naked Short Sold Part 2 (A look at Jan 15 to 29 SEC Data)",
  "link_flair_richtext": [
    {
      "e": "text",
      "t": "DD"
    }
  ],
  "subreddit_name_prefixed": "r/wallstreetbets",
  "hidden": false,
  "pwls": 7,
  "link_flair_css_class": "dd",
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_llmiu1",
  "quarantine": false,
  "link_flair_text_color": "light",
  "upvote_ratio": 0.92,
  "author_flair_background_color": "",
  "subreddit_type": "public",
  "ups": 1209,
  "total_awards_received": 14,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": null,
  "is_original_content": true,
  "user_reports": [],
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": "DD",
  "can_mod_post": false,
  "score": 1209,
  "approved_by": null,
  "author_premium": true,
  "thumbnail": "self",
  "edited": 1613545473,
  "author_flair_css_class": null,
  "author_flair_richtext": [
    {
      "e": "text",
      "t": "Big DD Energy"
    }
  ],
  "gildings": {
    "gid_1": 2
  },
  "post_hint": "self",
  "content_categories": null,
  "is_self": true,
  "mod_note": null,
  "created": 1613566697,
  "link_flair_type": "richtext",
  "wls": 7,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "richtext",
  "domain": "self.wallstreetbets",
  "allow_live_comments": true,
  "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>In this DDDD (Data-Driven DD), we&#39;ll be analyzing some Failure to Deliver (FTD) data released by the SEC for Jan 15 - 29 to definitively see if there&#39;s been any shady shit going on with GME; namely, illegal (or legal by MMs?) naked short selling. This is a continuation of a similar analysis I did <a href=\"https://www.reddit.com/r/wallstreetbets/comments/larhlw/dddd_is_gme_being_illegally_naked_short_sold/\">last time</a> when the last data set was released, with a few modifications. Since I&#39;m sure 99% of y&#39;all are barely going to read this entire thing, let alone read a second wall of text, I&#39;ll just re-use some of the content and explanations in this post.</p>\n\n<p><em>Disclaimer - This is not financial advice, and a lot of the content below is my personal opinion and for ENTERTAINMENT PURPOSES ONLY. In fact, the numbers, facts, or explanations presented below could be wrong and be made up and with some satire thrown in. Don&#39;t buy random options because some person on the internet says so. Do your own research and come to your own conclusions on what you should do with your own money, and how levered you want to be based on your personal risk tolerance.</em></p>\n\n<p><strong>What is a Failure to Deliver?</strong></p>\n\n<p>A Failure to Deliver is reported when a broker is unable to deliver a share that they have sold to the clearing house by the settlement date (2 days after the transaction); <a href=\"https://www.reddit.com/r/wallstreetbets/comments/l9sh9e/dddd_why_gme_might_next_week_and_how_it_could/\">see my DDDD discussing what how this all works if you&#39;re curious</a>. This can happen for many reason, and in the <a href=\"https://www.sec.gov/investor/pubs/regsho.htm\">examples given by the SEC</a> includes delays if people are physically delivering share certificates for some reason, and market makers (eg. Citadel) legally selling shares to a buyer without an actual seller (i.e. naked short sale) to provide liquidity; they just need to make sure they&#39;re able to later source that share quickly after it.</p>\n\n<p><strong>Methodology &amp; Caveats</strong></p>\n\n<p>I&#39;m going to process the raw SEC data and join it with some market data from an API, which I&#39;ll paste below. This processed, enriched data, which I have uploaded <a href=\"https://www.file.io/download/SbQSw9PUtZfS\">here</a> for anyone wrinkle-brained enough to dig through the data themselves, is then analyzed by another script to answer several questions to help definitively show what sort of involvement of naked short selling in GME during Jan 15 - 29. The answers we&#39;re going to specifically answer is</p>\n\n<ol>\n<li>How many days saw a significant amount of FTDs for GME, and how does that compare to other stocks?</li>\n<li>What was the total value of FTDs of GME during this period, and how does it compare to other stocks?</li>\n<li><strong>What % of the volume for GME couldn&#39;t be delivered during this time?</strong></li>\n</ol>\n\n<p>The last part is the most important imo, since GME accounted for an absurdly large portion of the market&#39;s volume for multiple days in January, so if you don&#39;t normalize for volume you&#39;ll obviously have GME top every analysis in absolute terms.</p>\n\n<p>Now, <strong>these are all rough and kind of inaccurate especially for low-volume tickers</strong> because the SEC data is based on the total number of outstanding failure-to-deliver shares for a particular settlement date. This means that</p>\n\n<ol>\n<li>Since you can have the same share being failed to deliver multiple days in a row, shares in these situations will be counted multiple times in all the data shown below.</li>\n<li>The earliest possible date shares in a trade can be counted as failed to be delivered is 3 trading days after the transaction occurred (i.e. T+2 settlement), so <strong>literally none of the failure-to-deliver shares represents that day&#39;s volume</strong>. However, I&#39;m going to make an assumption that a day&#39;s volume will be in the same ball park as the volume from 3 days ago, so it should give a rough estimate. There are quite a few cases, especially with small-caps, where this is clearly not the case, and you will see many cases with a 100+% failure to deliver / volume results if anyone goes through the raw data.</li>\n<li>The dollar value itself is wrong because it&#39;s using the price at settlement date, not the transaction date.</li>\n</ol>\n\n<p>However, with these caveats, the purpose is to compare GME with other stocks to see if anything stands out while answering those questions, so it should give a fairly accurate, albeit imperfect, representation of this.</p>\n\n<p><strong>The Code</strong></p>\n\n<p>Feel free to skip this section if y&#39;all are code illiterate, but putting this here for transparency and so that someone can call me out if I&#39;m making any of the results up or if I have a bug somewhere, which considering I threw this together in less than an hour, probably is the case. If you do see something wrong pls comment and I&#39;ll fix it if it&#39;s legitimate.</p>\n\n<p><em>Processing Code</em></p>\n\n<pre><code>import json\nfrom collections import defaultdict\nimport time\nimport requests\n\nPOLYGON_API_KEY = &#39;&lt;POLYGON API KEY HERE&gt;&#39;\nVOLUME_DATA_API_URL = &#39;https://api.polygon.io/v1/open-close/{}/2021-01-{}?unadjusted=true&amp;apiKey=&#39; + POLYGON_API_KEY\n\n# Reads data\ndates_to_stocks = defaultdict(lambda: defaultdict(float))\nf = open(&#39;fail_to_delivers.txt&#39;, &#39;r&#39;) # https://www.sec.gov/data/foiadocsfailsdatahtm\nall_tickers_set = set()\nfor line in f:\n    parts = line.split(&#39;|&#39;);\n    date = parts[0]\n    ticker = parts[2]\n    try:\n        fails = int(parts[3])\n        price = float(parts[5])\n        # Ignore anything &lt; 25M\n        if price * fails &lt; 25000000:\n            continue\n        all_tickers_set.add(ticker)\n        value_of_fails = price * fails\n        dates_to_stocks[date][ticker] = (value_of_fails, fails)\n    except ValueError:\n        # fails or price was not a number; probably not traded (eg.&#39;.&#39;)\n        pass\n\ndata_by_date = defaultdict(lambda: {})\nfor date, stocks in dates_to_stocks.items():\n    day = int(date[-2:])\n    for ticker in all_tickers_set:\n        if ticker in stocks:\n            val_of_fails = stocks[ticker][0]\n            num_fails = stocks[ticker][1]\n        else:\n            val_of_fails = 0\n            num_fails = 0\n        req = requests.get(url=VOLUME_DATA_API_URL.format(ticker, str(day).zfill(2)))\n        res = req.json()\n        if res[&#39;status&#39;] == &#39;NOT_FOUND&#39;:\n            # Skip this day of data if no vol\n            data_by_date[date][ticker] = {\n                &#39;num_fails&#39;: 0,\n                &#39;val_of_fails&#39;: 0,\n                &#39;volume&#39;: 0,\n                &#39;num_fails_pct_vol&#39;: 0,\n            }\n            continue\n        else:\n            try:\n                volume = res[&#39;volume&#39;]\n            except KeyError:\n                print(res)\n        val_of_fails_in_mill = int(val_of_fails / 1000000)\n        pct_vol = num_fails / volume * 100\n        data_by_date[date][ticker] = {\n            &#39;num_fails&#39;: num_fails,\n            &#39;val_of_fails&#39;: val_of_fails,\n            &#39;volume&#39;: volume,\n            &#39;num_fails_pct_vol&#39;: pct_vol,\n        }\n        print(data_by_date[date][ticker])\n\nwith open(&#39;data.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:\n    json.dump(data_by_date, f, ensure_ascii=False, indent=2)\n</code></pre>\n\n<p>Here&#39;s my output <a href=\"https://www.file.io/download/SbQSw9PUtZfS\">data.json</a>.</p>\n\n<p><em>Analysis Code</em></p>\n\n<pre><code>import json\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\nwith open(&#39;./data.json&#39;) as f:\n    data = json.load(f)\nx_axis = data.keys() # Dates = X axis\n\n# List of all tickers in the FTD list\nall_tickers_set = set()\nfor date, date_data_by_ticker in data.items():\n    all_tickers_set.update(date_data_by_ticker.keys())\n\n# Pre-processing + stats collecting\ndata_by_ticker = [] # Ticker data = Y values\ndays_more_25m_fails_freq_map = defaultdict(lambda: 0) # Counts tickers by # days &gt; 10M FTDs\ntotal_val_of_fails_counter = defaultdict(lambda: 0)\ntotal_val_of_fails_vs_vol_counter = defaultdict(lambda: { &#39;total_fails&#39;: 0, &#39;total_vol&#39;: 0 })\nfor ticker in all_tickers_set:\n    ticker_data = []\n    for date in x_axis:\n        ticker_data.append(data[date][ticker])\n        if data[date][ticker][&#39;val_of_fails&#39;] &gt; 25000000:\n            days_more_25m_fails_freq_map[ticker] += 1\n        total_val_of_fails_counter[ticker] += data[date][ticker][&#39;val_of_fails&#39;]\n        total_val_of_fails_vs_vol_counter[ticker][&#39;total_fails&#39;] += data[date][ticker][&#39;num_fails&#39;]\n        total_val_of_fails_vs_vol_counter[ticker][&#39;total_vol&#39;] += data[date][ticker][&#39;volume&#39;]\n\ndays_more_25m_fails_freq_map_sorted = dict(sorted(days_more_25m_fails_freq_map.items(), key=lambda item: item[1], reverse=True))\nplace = 1\nprint(&#39;TOP 20 TICKERS BY DAYS &gt; $25M FTD&#39;)\ntop_tickers_days_fail = list(days_more_25m_fails_freq_map_sorted.keys())[:20]\nfor ticker in top_tickers_days_fail:\n    days = days_more_25m_fails_freq_map[ticker]\n    print(&#39;{: &lt;2} ${: &lt;5} {: &lt;2} Days&#39;.format(place, ticker, days))\n    place += 1\n\ntotal_val_of_fails_counter_sorted = dict(sorted(total_val_of_fails_counter.items(), key=lambda item: item[1], reverse=True))\nplace = 1\ntop_tickers_val_ftd = list(total_val_of_fails_counter_sorted.keys())[:20]\nprint(&#39;TICKERS BY TOTAL VAL OF FTDs&#39;)\nfor ticker in top_tickers_val_ftd:\n    ftd_val = total_val_of_fails_counter[ticker]\n    ftd_val_mills = int(ftd_val / 1000000)\n    print(&#39;{: &lt;2} ${: &lt;5} ${: &lt;9}M&#39;.format(place, ticker, ftd_val_mills))\n    place += 1\n\ntotal_fails_div_vol = {}\nfor ticker, val in total_val_of_fails_vs_vol_counter.items():\n    if val[&#39;total_fails&#39;] == 0 or val[&#39;total_vol&#39;] == 0:\n        continue\n    total_fails_div_vol[ticker] = 1.0 * val[&#39;total_fails&#39;] / val[&#39;total_vol&#39;]\ntotal_fails_div_vol_keys_sorted = sorted(total_fails_div_vol.keys(), key=lambda ticker: total_fails_div_vol[ticker], reverse=True)\nplace = 1\ntotal_fails_div_vol_keys_sorted = total_fails_div_vol_keys_sorted[:70]\nprint(&#39;TOP TICKERS BY FTDS / VOL&#39;)\nfor ticker in total_fails_div_vol_keys_sorted:\n    mill_ftds = int(total_val_of_fails_vs_vol_counter[ticker][&#39;total_fails&#39;] / 1000000)\n    mill_vol = int(total_val_of_fails_vs_vol_counter[ticker][&#39;total_vol&#39;] / 1000000)\n    print(&#39;{: &lt;2} {: &lt;5} {: &lt;2}M FTDs {: &lt;4}M VOL {:.2f}% of total volume&#39;.format(place, ticker, mill_ftds, mill_vol, total_fails_div_vol[ticker] * 100))\n    place += 1\n</code></pre>\n\n<p><strong>Results</strong></p>\n\n<pre><code>TOP 20 TICKERS BY DAYS &gt; $25M FTD\n1  $GME   8  Days\n2  $OPEN  6  Days\n3  $IUSB  5  Days\n4  $TAL   5  Days\n5  $TQQQ  5  Days\n6  $EEM   5  Days\n7  $SPY   4  Days\n8  $IFF   4  Days\n9  $HYG   4  Days\n10 $QQQ   3  Days\n11 $FXI   3  Days\n12 $QS    3  Days\n13 $DD    3  Days\n14 $AKAM  3  Days\n15 $SLB   3  Days\n16 $LQD   2  Days\n17 $IYR   2  Days\n18 $XLU   2  Days\n19 $TIP   2  Days\n20 $IBB   2  Days\nTICKERS BY TOTAL VAL OF FTDs\n1  $GME   $1023     M\n2  $IUSB  $606      M\n3  $FALN  $431      M\n4  $PDO   $422      M\n5  $HYG   $389      M\n6  $TAL   $314      M\n7  $CRM   $303      M\n8  $TQQQ  $298      M\n9  $XOP   $292      M\n10 $IFF   $292      M\n11 $SPY   $282      M\n12 $RLAY  $251      M\n13 $QQQ   $239      M\n14 $BAC   $224      M\n15 $LI    $223      M\n16 $EFV   $221      M\n17 $XRT   $219      M\n18 $EEM   $218      M\n19 $SLB   $203      M\n20 $OPEN  $190      M\nTOP TICKERS BY FTDS / VOL\n1  PDO   20M FTDs 8   M VOL 246.95% of total volume\n2  TMKRU 2 M FTDs 1   M VOL 154.21% of total volume\n3  RLAY  5 M FTDs 6   M VOL 92.82% of total volume\n4  FALN  14M FTDs 19  M VOL 76.67% of total volume\n5  GINN  0 M FTDs 0   M VOL 66.71% of total volume\n6  IUSB  11M FTDs 33  M VOL 32.95% of total volume\n7  SPRQ  4 M FTDs 31  M VOL 15.42% of total volume\n8  ESGU  1 M FTDs 12  M VOL 15.09% of total volume\n9  BBEU  5 M FTDs 35  M VOL 14.27% of total volume\n10 ILF   3 M FTDs 34  M VOL 10.86% of total volume\n11 EFV   4 M FTDs 42  M VOL 10.61% of total volume\n12 OPEN  6 M FTDs 70  M VOL 9.78% of total volume\n13 BBAX  5 M FTDs 56  M VOL 9.75% of total volume\n14 SCHF  2 M FTDs 30  M VOL 9.41% of total volume\n15 ITA   0 M FTDs 3   M VOL 8.92% of total volume\n16 ESGD  0 M FTDs 5   M VOL 8.37% of total volume\n17 HYEM  1 M FTDs 17  M VOL 8.09% of total volume\n18 FLOT  0 M FTDs 11  M VOL 7.41% of total volume\n19 TAL   4 M FTDs 57  M VOL 7.20% of total volume\n20 IYW   0 M FTDs 7   M VOL 6.93% of total volume\n21 HYLB  1 M FTDs 24  M VOL 6.79% of total volume\n22 LSI   0 M FTDs 3   M VOL 6.28% of total volume\n23 YUM   0 M FTDs 15  M VOL 6.25% of total volume\n24 XOP   4 M FTDs 74  M VOL 5.61% of total volume\n25 SLB   8 M FTDs 163 M VOL 5.04% of total volume\n26 AKAM  1 M FTDs 25  M VOL 5.01% of total volume\n27 BLI   0 M FTDs 12  M VOL 4.45% of total volume\n28 VXF   0 M FTDs 5   M VOL 4.13% of total volume\n29 ASHR  0 M FTDs 27  M VOL 3.25% of total volume\n30 FXR   0 M FTDs 22  M VOL 3.12% of total volume\n31 NKLA  6 M FTDs 215 M VOL 3.08% of total volume\n32 LI    7 M FTDs 230 M VOL 3.06% of total volume\n33 SJNK  1 M FTDs 47  M VOL 2.96% of total volume\n34 IFF   2 M FTDs 90  M VOL 2.82% of total volume\n35 VEU   0 M FTDs 32  M VOL 2.75% of total volume\n36 TIP   0 M FTDs 24  M VOL 2.68% of total volume\n37 SHLS  1 M FTDs 47  M VOL 2.67% of total volume\n38 AMCX  0 M FTDs 31  M VOL 2.55% of total volume\n39 XRT   2 M FTDs 111 M VOL 2.34% of total volume\n40 IBB   0 M FTDs 28  M VOL 2.17% of total volume\n41 BHP   0 M FTDs 31  M VOL 2.07% of total volume\n42 IYR   1 M FTDs 53  M VOL 2.05% of total volume\n43 TAK   1 M FTDs 75  M VOL 1.94% of total volume\n44 BNDX  0 M FTDs 37  M VOL 1.91% of total volume\n45 COP   2 M FTDs 143 M VOL 1.85% of total volume\n46 AEE   0 M FTDs 19  M VOL 1.84% of total volume\n47 GH    0 M FTDs 10  M VOL 1.83% of total volume\n48 TEAM  0 M FTDs 17  M VOL 1.78% of total volume\n49 CRM   1 M FTDs 79  M VOL 1.74% of total volume\n50 VEA   1 M FTDs 108 M VOL 1.74% of total volume\n51 BBJP  0 M FTDs 53  M VOL 1.66% of total volume\n52 SFIX  0 M FTDs 49  M VOL 1.62% of total volume\n53 RLX   3 M FTDs 235 M VOL 1.49% of total volume\n54 QS    1 M FTDs 131 M VOL 1.43% of total volume\n55 IEMG  1 M FTDs 136 M VOL 1.39% of total volume\n56 PEN   0 M FTDs 9   M VOL 1.33% of total volume\n57 HYG   4 M FTDs 342 M VOL 1.30% of total volume\n58 FXI   2 M FTDs 172 M VOL 1.24% of total volume\n59 BAC   6 M FTDs 557 M VOL 1.23% of total volume\n60 CMG   0 M FTDs 2   M VOL 1.21% of total volume\n61 NOK   36M FTDs 3074M VOL 1.20% of total volume\n62 XLU   1 M FTDs 137 M VOL 1.16% of total volume\n63 TQQQ  3 M FTDs 268 M VOL 1.12% of total volume\n64 XBI   0 M FTDs 55  M VOL 1.12% of total volume\n65 IWF   0 M FTDs 16  M VOL 1.07% of total volume\n66 GME   10M FTDs 974 M VOL 1.03% of total volume\n67 ACWI  0 M FTDs 44  M VOL 1.01% of total volume\n68 APHA  2 M FTDs 212 M VOL 1.01% of total volume\n69 IJR   0 M FTDs 63  M VOL 0.99% of total volume\n70 APPN  0 M FTDs 18  M VOL 0.98% of total volume\n</code></pre>\n\n<p>Hopefully, this data speaks for itself, but as a TLDR</p>\n\n<p>What does stand out is that GME has the most days with FTD &gt; $25M (8 days) and cumulative value of FTDs (&gt; $1B) in the SEC list</p>\n\n<p>but</p>\n\n<p>Both can be explained by the fact that GME accounted for a disproportionately large amount of the total volume during the period. If you <strong>normalize by volume, GME becomes the 66th stock with the most Failure to Delivers</strong>. While this may show that a few players have been doing something sketchy, it doesn&#39;t look like there&#39;s any systematic fraud going on.</p>\n\n<p>&#x200B;</p>\n\n<p>EDIT - I&#39;m an idiot and forgot to * 100 for percentage. Fixed.</p>\n</div><!-- SC_ON -->",
  "likes": null,
  "suggested_sort": "confidence",
  "banned_at_utc": null,
  "view_count": null,
  "archived": false,
  "no_follow": false,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "preview": {
    "images": [
      {
        "source": {
          "url": "https://external-preview.redd.it/4-ufIfhef85fAy3iokQxFf-Z1dXMYnURro2f2Zc1pq8.jpg?auto=webp&s=fcf918f4cd48f6c27ed8b959603d7058dfc2e6e7",
          "width": 95,
          "height": 92
        },
        "resolutions": [],
        "variants": {},
        "id": "X0VSl1KYbb33FPS-iaYb6rC3mpAgXgiKp6b-BGo8dwI"
      }
    ],
    "enabled": false
  },
  "awarders": [],
  "media_only": false,
  "link_flair_template_id": "5692ce02-b860-11e5-b542-0edc7016bbd3",
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": "Big DD Energy",
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_2th52",
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "#365b8c",
  "id": "llmiu1",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "ASoftEngStudent",
  "discussion_type": null,
  "num_comments": 136,
  "send_replies": true,
  "whitelist_status": "some_ads",
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "author_flair_text_color": "dark",
  "permalink": "/r/wallstreetbets/comments/llmiu1/dddd_was_gme_being_illegally_naked_short_sold/",
  "parent_whitelist_status": "some_ads",
  "stickied": false,
  "url": "https://www.reddit.com/r/wallstreetbets/comments/llmiu1/dddd_was_gme_being_illegally_naked_short_sold/",
  "subreddit_subscribers": 9111383,
  "created_utc": 1613586698,
  "num_crossposts": 0,
  "media": null,
  "is_video": false,
  "original_created_utc": 1613537897,
  "the_new_excerpt": "In this DDDD (Data-Driven DD), we'll be analyzing some Failure to Deliver (FTD)\ndata released by the SEC for Jan 15 - 29 to definitively see if there's been any\nshady shit going on with GME; namely, illegal (or legal by MMs?) naked short\nselling. This is a continuation of a similar analysis I did…"
}