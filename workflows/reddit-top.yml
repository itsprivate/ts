on:
  reddit:
    # url: https://www.reddit.com/r/stocks/top/
    url: https://www.reddit.com/r/all/top/
    source: json
    config:
      # limit: 2
      # force: true
      outputsMode: combine
      exportOutputs: true
      filterScript: |
        delete item.all_awardings
        return item
    requestConfig:
      params:
        raw_json: 1
jobs:
  save:
    name: save to json
    runs-on: ubuntu-latest
    steps:
      - name: Format message
        id: title
        uses: actions/github-script@v2
        env:
          OUTPUTS_PATH: ${{ on.reddit.outputs.path }}
        with:
          script: |
            const fs = require('fs');
            const outputs = require(`${process.env.GITHUB_WORKSPACE}/${process.env.OUTPUTS_PATH}`)
            const titles = outputs.map((item,index)=>{
              return item.title
            }).join("\n");
            console.log('titles',titles)
            return titles
          result-encoding: string
      - name: Translate to ZH
        id: translation
        uses: theowenyoung/translation-action@main
        with:
          provider: tencent
          api_key: ${{ secrets.TENCENT_TRANSLATION_SECRET_KEY }}
          lang: "zh"
          api_additional_parameter: ${{ secrets.TENCENT_TRANSLATION_SECRET_ID }}
          api_additional_parameter2: na-siliconvalley
          api_additional_parameter3: en
          source: ${{steps.title.outputs.result}}
      - name: Create Reddit JSON
        uses: actions/github-script@v2
        env:
          TEXT: ${{steps.translation.outputs.text}}
          OUTPUTS_PATH: ${{ on.reddit.outputs.path }}
        with:
          script: |
            const path = require('path')
            const fsPure = require('fs')
            const fs = fsPure.promises
            const outputs = require(`${process.env.GITHUB_WORKSPACE}/${process.env.OUTPUTS_PATH}`)
            const items = outputs;
            const titleStr = process.env.TEXT || "";
            console.log('titleStr',titleStr)
            const titleArray = titleStr.split('\n')
            for(let i=0;i<items.length;i++){
              const item = items[i]
              const createdAt = new Date(item.created_utc*1000)
              let link = item.permalink;
              if(link && link.endsWith('/')){
                link = link.slice(0,-1)
              }
              const redditFilePath = `./data/reddit-top${link}.json`
              await fs.mkdir(path.dirname(redditFilePath), {
                  recursive: true
              }).then(()=>{
                return fs.writeFile(
                    redditFilePath,
                    JSON.stringify(item, null, 2),
                    {
                      flag: "wx"
                    }
                ).catch((e) => {
                  if (e.code === "EEXIST") {
                    return Promise.resolve();
                  } else {
                    return Promise.reject(e);
                  }
                });
              })
              const utcYear = createdAt.getUTCFullYear();
              const locales = ['en','zh'];
              const title = item.title;
              const tags = [item.subreddit];
              if (item.link_flair_text) {
                tags.push(item.link_flair_text)
              }
              const titles = {
                en: title,
                zh: titleArray[i]
              }
              for(let i=0;i<locales.length;i++){
                const locale = locales[i];
                const filePath = `./i18n/i18next/${locale}/reddit-title-${utcYear}.json`
                const tagFilePath = `./i18n/i18next/${locale}/translation-tag.json`
                const nextYearFilePath = `./i18n/i18next/${locale}/reddit-title-${utcYear+1}.json`
                const isExist = fsPure.existsSync(filePath);
                if(!isExist){
                    await fs.writeFile(filePath,'{}')
                }
                const isNextYearExist = fsPure.existsSync(nextYearFilePath);
                if(!isNextYearExist){
                    await fs.writeFile(nextYearFilePath,'{}')
                }
                const isTagFileExist = fsPure.existsSync(tagFilePath);
                if(!isTagFileExist){
                    await fs.writeFile(tagFilePath,'{}')
                }
                const localeJson = await fs.readFile(filePath,'utf8')
                const localeObj = JSON.parse(localeJson)
                if(titles[locale]){
                  localeObj[title] = titles[locale]
                }else{
                  console.log(`there is no ${locale} translation`,titleArray,i)
                }
                // write
                await fs.writeFile(filePath,JSON.stringify(localeObj,null,2))

                const tagLocaleJson = await fs.readFile(tagFilePath,'utf8')
                const tagLocaleObj = JSON.parse(tagLocaleJson)
                let isChanged = false
                tags.forEach(tag=>{
                  if(!tagLocaleObj[tag]){
                    isChanged = true;
                    tagLocaleObj[tag] = tag;
                  }
                })
                if(isChanged){
                  // write
                  await fs.writeFile(tagFilePath,JSON.stringify(tagLocaleObj,null,2))
                }
              }
            }

            return true
      - name: Commit changes
        uses: EndBug/add-and-commit@v5
        with:
          message: "chore: add sources"
          add: "."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy site
        uses: actionsflow/axios@v1
        with:
          url: ${{ secrets.VERCEL_HOOK }}
          method: "GET"
