on:
  reddit:
    # url: https://www.reddit.com/r/stocks/top/
    url: https://www.reddit.com/r/all/top/
    source: json
    config:
      # limit: 2
      # force: true
      outputsMode: combine
      exportOutputs: true
      filterScript: |
        delete item.all_awardings
        return item
    requestConfig:
      params:
        raw_json: 1
jobs:
  save:
    name: save to json
    runs-on: ubuntu-latest
    steps:
      - name: Create Reddit JSON
        uses: actions/github-script@v2
        env:
          OUTPUTS_PATH: ${{ on.reddit.outputs.path }}
        with:
          script: |
            const path = require("path")
            const fsPure = require("fs")
            const fs = fsPure.promises
            const outputs = require(`${process.env.GITHUB_WORKSPACE}/${process.env.OUTPUTS_PATH}`)
            const items = outputs
            for (let i = 0; i < items.length; i++) {
              const item = items[i]
              // const createdAt = new Date(item.created_utc*1000)
              const createdAt = new Date()
              item.created_utc = Math.floor(createdAt.getTime() / 1000)
              let link = item.permalink
              if (link && link.endsWith("/")) {
                link = link.slice(0, -1)
              }
              const redditFilePath = `./data/reddit-top${link}.json`
              await fs
                .mkdir(path.dirname(redditFilePath), {
                  recursive: true,
                })
                .then(() => {
                  return fs
                    .writeFile(redditFilePath, JSON.stringify(item, null, 2), {
                      flag: "wx",
                    })
                    .catch(e => {
                      if (e.code === "EEXIST") {
                        return Promise.resolve()
                      } else {
                        return Promise.reject(e)
                      }
                    })
                })
              const utcYear = createdAt.getUTCFullYear()
              const title = item.title
              const tags = [item.subreddit]
              if (item.link_flair_text) {
                tags.push(item.link_flair_text)
              }
              const locale = "en"
              const filePath = `./i18n/i18next/${locale}/reddit-title-${utcYear}.json`
              const tagFilePath = `./i18n/i18next/${locale}/translation-tag.json`
              const nextYearFilePath = `./i18n/i18next/${locale}/reddit-title-${
                utcYear + 1
              }.json`
              const isExist = fsPure.existsSync(filePath)
              if (!isExist) {
                await fs.writeFile(filePath, "{}")
              }
              const isNextYearExist = fsPure.existsSync(nextYearFilePath)
              if (!isNextYearExist) {
                await fs.writeFile(nextYearFilePath, "{}")
              }
              const isTagFileExist = fsPure.existsSync(tagFilePath)
              if (!isTagFileExist) {
                await fs.writeFile(tagFilePath, "{}")
              }
              const localeJson = await fs.readFile(filePath, "utf8")
              const localeObj = JSON.parse(localeJson)
              localeObj[title] = title

              // write
              await fs.writeFile(filePath, JSON.stringify(localeObj, null, 2))
              const tagLocaleJson = await fs.readFile(tagFilePath, "utf8")
              const tagLocaleObj = JSON.parse(tagLocaleJson)
              let isChanged = false
              tags.forEach(tag => {
                if (!tagLocaleObj[tag]) {
                  isChanged = true
                  tagLocaleObj[tag] = tag
                }
              })
              if (isChanged) {
                // write
                await fs.writeFile(tagFilePath, JSON.stringify(tagLocaleObj, null, 2))
              }
            }
            return true
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        if: env.GITHUB_ACTION=='true'
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          commit-message: "chore: new item"
          branch: new-item
          delete-branch: true
